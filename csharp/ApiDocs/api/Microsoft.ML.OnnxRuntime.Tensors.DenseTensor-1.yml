### YamlMime:ManagedReference
items:
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  id: DenseTensor`1
  parent: Microsoft.ML.OnnxRuntime.Tensors
  children:
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(Memory{`0},ReadOnlySpan{System.Int32},System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(ReadOnlySpan{System.Int32},System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo(`0[],System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf(`0)
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape(ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue(System.Int32,`0)
  langs:
  - csharp
  - vb
  name: DenseTensor<T>
  nameWithType: DenseTensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>
  type: Class
  source:
    id: DenseTensor
    path: ''
    startLine: 7738
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nRepresents a multi-dimensional collection of objects of type T that can be accessed by indices.  \nDenseTensor stores values in a contiguous sequential block of memory where all values are represented.\n"
  example: []
  syntax:
    content: 'public class DenseTensor<T> : Tensor<T>'
    typeParameters:
    - id: T
      description: "\nType contained within the Tensor. Typically a value type such as int, double, float, etc.\n"
    content.vb: >-
      Public Class DenseTensor(Of T)
          Inherits Tensor(Of T)
  inheritance:
  - System.Object
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  implements:
  - IList
  - IList{{T}}
  - IReadOnlyList{{T}}
  - IStructuralComparable
  - IStructuralEquatable
  inheritedMembers:
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Length
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Rank
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsReversedStride
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Dimensions
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Strides
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Fill({T})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty(ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty``1
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetDiagonal
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetDiagonal(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetUpperTriangle
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetUpperTriangle(System.Int32)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle(System.Int32,System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Item(System.Int32[])
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Item(ReadOnlySpan{System.Int32})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}},Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}},Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsFixedSize
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsReadOnly
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Contains({T})
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.ToDenseTensor
  - Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetArrayString(System.Boolean)
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  - Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DenseTensor(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T)
  name.vb: DenseTensor(Of T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: DenseTensor(Int32)
  nameWithType: DenseTensor<T>.DenseTensor(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.DenseTensor(System.Int32)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 7774
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nInitializes a rank-1 Tensor using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code>.\n"
  example: []
  syntax:
    content: public DenseTensor(int length)
    parameters:
    - id: length
      type: System.Int32
      description: Size of the 1-dimensional tensor
    content.vb: Public Sub New(length As Integer)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor*
  nameWithType.vb: DenseTensor(Of T).DenseTensor(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).DenseTensor(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(ReadOnlySpan{System.Int32},System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(ReadOnlySpan{System.Int32},System.Boolean)
  id: '#ctor(ReadOnlySpan{System.Int32},System.Boolean)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: DenseTensor(ReadOnlySpan<Int32>, Boolean)
  nameWithType: DenseTensor<T>.DenseTensor(ReadOnlySpan<Int32>, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.DenseTensor(ReadOnlySpan<System.Int32>, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 7791
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nInitializes a rank-n Tensor using the dimensions specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">dimensions</code>.\n"
  example: []
  syntax:
    content: public DenseTensor(ReadOnlySpan<int> dimensions, bool reverseStride = false)
    parameters:
    - id: dimensions
      type: ReadOnlySpan{System.Int32}
      description: "\nAn span of integers that represent the size of each dimension of the DenseTensor to create.\n"
    - id: reverseStride
      type: System.Boolean
      description: "\nFalse (default) to indicate that the first dimension is most major (farthest apart) and the last dimension \nis most minor (closest together): akin to row-major in a rank-2 tensor.  \nTrue to indicate that the last dimension is most major (farthest apart) and the first dimension is most \nminor (closest together): akin to column-major in a rank-2 tensor.\n"
    content.vb: Public Sub New(dimensions As ReadOnlySpan(Of Integer), reverseStride As Boolean = False)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor*
  nameWithType.vb: DenseTensor(Of T).DenseTensor(ReadOnlySpan(Of Int32), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).DenseTensor(ReadOnlySpan(Of System.Int32), System.Boolean)
  name.vb: DenseTensor(ReadOnlySpan(Of Int32), Boolean)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(Memory{`0},ReadOnlySpan{System.Int32},System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor(Memory{`0},ReadOnlySpan{System.Int32},System.Boolean)
  id: '#ctor(Memory{`0},ReadOnlySpan{System.Int32},System.Boolean)'
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: DenseTensor(Memory<T>, ReadOnlySpan<Int32>, Boolean)
  nameWithType: DenseTensor<T>.DenseTensor(Memory<T>, ReadOnlySpan<Int32>, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.DenseTensor(Memory<T>, ReadOnlySpan<System.Int32>, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 7808
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nConstructs a new DenseTensor of the specified dimensions, wrapping existing backing memory for the contents.\n"
  example: []
  syntax:
    content: public DenseTensor(Memory<T> memory, ReadOnlySpan<int> dimensions, bool reverseStride = false)
    parameters:
    - id: memory
      type: Memory{{T}}
      description: ''
    - id: dimensions
      type: ReadOnlySpan{System.Int32}
      description: "\nAn span of integers that represent the size of each dimension of the DenseTensor to create."
    - id: reverseStride
      type: System.Boolean
      description: "\nFalse (default) to indicate that the first dimension is most major (farthest apart) and the last dimension \nis most minor (closest together): akin to row-major in a rank-2 tensor.  \nTrue to indicate that the last dimension is most major (farthest apart) and the first dimension is most \nminor (closest together): akin to column-major in a rank-2 tensor.\n"
    content.vb: Public Sub New(memory As Memory(Of T), dimensions As ReadOnlySpan(Of Integer), reverseStride As Boolean = False)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor*
  nameWithType.vb: DenseTensor(Of T).DenseTensor(Memory(Of T), ReadOnlySpan(Of Int32), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).DenseTensor(Memory(Of T), ReadOnlySpan(Of System.Int32), System.Boolean)
  name.vb: DenseTensor(Memory(Of T), ReadOnlySpan(Of Int32), Boolean)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer
  id: Buffer
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: DenseTensor<T>.Buffer
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Buffer
  type: Property
  source:
    id: Buffer
    path: ''
    startLine: 7824
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nMemory storing backing values of this tensor.\n"
  example: []
  syntax:
    content: public Memory<T> Buffer { get; }
    parameters: []
    return:
      type: Memory{{T}}
    content.vb: Public ReadOnly Property Buffer As Memory(Of T)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer*
  nameWithType.vb: DenseTensor(Of T).Buffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Buffer
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  nameWithType: DenseTensor<T>.GetValue(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.GetValue(System.Int32)
  type: Method
  source:
    id: GetValue
    path: ''
    startLine: 7832
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nGets the value at the specified index, where index is a linearized version of n-dimension indices \nusing strides. For a scalar, use index = 0\n"
  example: []
  syntax:
    content: public override T GetValue(int index)
    parameters:
    - id: index
      type: System.Int32
      description: An integer index computed as a dot-product of indices.
    return:
      type: '{T}'
      description: The value at the specified position in this Tensor.
    content.vb: Public Overrides Function GetValue(index As Integer) As T
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetValue(System.Int32)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue*
  nameWithType.vb: DenseTensor(Of T).GetValue(Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).GetValue(System.Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue(System.Int32,`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue(System.Int32,`0)
  id: SetValue(System.Int32,`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: SetValue(Int32, T)
  nameWithType: DenseTensor<T>.SetValue(Int32, T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.SetValue(System.Int32, T)
  type: Method
  source:
    id: SetValue
    path: ''
    startLine: 7843
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nSets the value at the specified index, where index is a linearized version of n-dimension indices \nusing strides. For a scalar, use index = 0\n"
  example: []
  syntax:
    content: public override void SetValue(int index, T value)
    parameters:
    - id: index
      type: System.Int32
      description: An integer index computed as a dot-product of indices.
    - id: value
      type: '{T}'
      description: The new value to set at the specified position in this Tensor.
    content.vb: Public Overrides Sub SetValue(index As Integer, value As T)
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.SetValue(System.Int32,{T})
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue*
  nameWithType.vb: DenseTensor(Of T).SetValue(Int32, T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).SetValue(System.Int32, T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: DenseTensor<T>.CopyTo(T[], Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    id: CopyTo
    path: ''
    startLine: 7854
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nOverrides Tensor.CopyTo(). Copies the content of the Tensor\nto the specified array starting with arrayIndex\n"
  example: []
  syntax:
    content: protected override void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: destination array
    - id: arrayIndex
      type: System.Int32
      description: start index
    content.vb: Protected Overrides Sub CopyTo(array As T(), arrayIndex As Integer)
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CopyTo({T}[],System.Int32)
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo*
  nameWithType.vb: DenseTensor(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: DenseTensor<T>.IndexOf(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.IndexOf(T)
  type: Method
  source:
    id: IndexOf
    path: ''
    startLine: 7875
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nDetermines the index of a specific item in the Tensor&lt;T>.\n"
  example: []
  syntax:
    content: protected override int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Object to locate
    return:
      type: System.Int32
      description: The index of item if found in the tensor; otherwise, -1
    content.vb: Protected Overrides Function IndexOf(item As T) As Integer
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IndexOf({T})
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf*
  nameWithType.vb: DenseTensor(Of T).IndexOf(T)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).IndexOf(T)
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone
  id: Clone
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: DenseTensor<T>.Clone()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Clone()
  type: Method
  source:
    id: Clone
    path: ''
    startLine: 7897
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a shallow copy of this tensor, with new backing storage.\n"
  example: []
  syntax:
    content: public override Tensor<T> Clone()
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
      description: A shallow copy of this tensor.
    content.vb: Public Overrides Function Clone As Tensor(Of T)
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Clone
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone*
  nameWithType.vb: DenseTensor(Of T).Clone()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Clone()
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  id: CloneEmpty``1(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  nameWithType: DenseTensor<T>.CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.CloneEmpty<TResult>(ReadOnlySpan<System.Int32>)
  type: Method
  source:
    id: CloneEmpty
    path: ''
    startLine: 7911
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nCreates a new Tensor of a different type with the specified dimensions and the same layout as this tensor \nwith elements initialized to their default value.\n"
  example: []
  syntax:
    content: public override Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions)
    parameters:
    - id: dimensions
      type: ReadOnlySpan{System.Int32}
      description: "\nAn span of integers that represent the size of each dimension of the DenseTensor to create."
    typeParameters:
    - id: TResult
      description: Type contained in the returned Tensor.
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{TResult}}
      description: A new tensor with the same layout as this tensor but different type and dimensions.
    content.vb: Public Overrides Function CloneEmpty(Of TResult)(dimensions As ReadOnlySpan(Of Integer)) As Tensor(Of TResult)
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty``1(ReadOnlySpan{System.Int32})
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty*
  nameWithType.vb: DenseTensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape(ReadOnlySpan{System.Int32})
  id: Reshape(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1
  langs:
  - csharp
  - vb
  name: Reshape(ReadOnlySpan<Int32>)
  nameWithType: DenseTensor<T>.Reshape(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Reshape(ReadOnlySpan<System.Int32>)
  type: Method
  source:
    id: Reshape
    path: ''
    startLine: 7922
  assemblies:
  - cs.temp.dll
  namespace: Microsoft.ML.OnnxRuntime.Tensors
  summary: "\nReshapes the current tensor to new dimensions, using the same backing storage.\n"
  example: []
  syntax:
    content: public override Tensor<T> Reshape(ReadOnlySpan<int> dimensions)
    parameters:
    - id: dimensions
      type: ReadOnlySpan{System.Int32}
      description: "\nAn span of integers that represent the size of each dimension of the DenseTensor to create."
    return:
      type: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
      description: A new tensor that reinterprets backing Buffer of this tensor with different dimensions.
    content.vb: Public Overrides Function Reshape(dimensions As ReadOnlySpan(Of Integer)) As Tensor(Of T)
  overridden: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Reshape(ReadOnlySpan{System.Int32})
  overload: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape*
  nameWithType.vb: DenseTensor(Of T).Reshape(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Reshape(ReadOnlySpan(Of System.Int32))
  name.vb: Reshape(ReadOnlySpan(Of Int32))
references:
- uid: Microsoft.ML.OnnxRuntime.Tensors
  commentId: N:Microsoft.ML.OnnxRuntime.Tensors
  name: Microsoft.ML.OnnxRuntime.Tensors
  nameWithType: Microsoft.ML.OnnxRuntime.Tensors
  fullName: Microsoft.ML.OnnxRuntime.Tensors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  parent: Microsoft.ML.OnnxRuntime.Tensors
  name: TensorBase
  nameWithType: TensorBase
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}
  parent: Microsoft.ML.OnnxRuntime.Tensors
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  name: Tensor<T>
  nameWithType: Tensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>
  nameWithType.vb: Tensor(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T)
  name.vb: Tensor(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: IList
- uid: IList{{T}}
  commentId: '!:IList{`0}'
  definition: IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{{T}}
  commentId: '!:IReadOnlyList{`0}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IStructuralComparable
  isExternal: true
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: IStructuralComparable
- uid: IStructuralEquatable
  isExternal: true
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: IStructuralEquatable
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Length
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Length
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  name: Length
  nameWithType: Tensor<T>.Length
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Length
  nameWithType.vb: Tensor(Of T).Length
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Length
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Rank
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Rank
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  name: Rank
  nameWithType: Tensor<T>.Rank
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Rank
  nameWithType.vb: Tensor(Of T).Rank
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Rank
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsReversedStride
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.IsReversedStride
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  name: IsReversedStride
  nameWithType: Tensor<T>.IsReversedStride
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReversedStride
  nameWithType.vb: Tensor(Of T).IsReversedStride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReversedStride
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Dimensions
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Dimensions
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  name: Dimensions
  nameWithType: Tensor<T>.Dimensions
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Dimensions
  nameWithType.vb: Tensor(Of T).Dimensions
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Dimensions
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Strides
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Strides
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  name: Strides
  nameWithType: Tensor<T>.Strides
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Strides
  nameWithType.vb: Tensor(Of T).Strides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Strides
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Fill({T})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Fill(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  name: Fill(T)
  nameWithType: Tensor<T>.Fill(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill(T)
  nameWithType.vb: Tensor(Of T).Fill(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
    name: Fill
    nameWithType: Tensor<T>.Fill
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
    name: Fill
    nameWithType: Tensor(Of T).Fill
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.CloneEmpty
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  name: CloneEmpty()
  nameWithType: Tensor<T>.CloneEmpty()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty()
  nameWithType.vb: Tensor(Of T).CloneEmpty()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
    name: CloneEmpty
    nameWithType: Tensor<T>.CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
    name: CloneEmpty
    nameWithType: Tensor(Of T).CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.CloneEmpty(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
  name: CloneEmpty(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).CloneEmpty(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
    name: CloneEmpty
    nameWithType: Tensor<T>.CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
    name: CloneEmpty
    nameWithType: Tensor(Of T).CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty``1
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.CloneEmpty``1
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  name: CloneEmpty<TResult>()
  nameWithType: Tensor<T>.CloneEmpty<TResult>()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>()
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)()
  name.vb: CloneEmpty(Of TResult)()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
    name: CloneEmpty<TResult>
    nameWithType: Tensor<T>.CloneEmpty<TResult>
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
    name: CloneEmpty(Of TResult)
    nameWithType: Tensor(Of T).CloneEmpty(Of TResult)
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetDiagonal
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetDiagonal
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  name: GetDiagonal()
  nameWithType: Tensor<T>.GetDiagonal()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal()
  nameWithType.vb: Tensor(Of T).GetDiagonal()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
    name: GetDiagonal
    nameWithType: Tensor<T>.GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
    name: GetDiagonal
    nameWithType: Tensor(Of T).GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetDiagonal(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetDiagonal(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  name: GetDiagonal(Int32)
  nameWithType: Tensor<T>.GetDiagonal(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal(System.Int32)
  nameWithType.vb: Tensor(Of T).GetDiagonal(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
    name: GetDiagonal
    nameWithType: Tensor<T>.GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
    name: GetDiagonal
    nameWithType: Tensor(Of T).GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetTriangle
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  name: GetTriangle()
  nameWithType: Tensor<T>.GetTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle()
  nameWithType.vb: Tensor(Of T).GetTriangle()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetTriangle(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  name: GetTriangle(Int32)
  nameWithType: Tensor<T>.GetTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32)
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetUpperTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetUpperTriangle
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  name: GetUpperTriangle()
  nameWithType: Tensor<T>.GetUpperTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle()
  nameWithType.vb: Tensor(Of T).GetUpperTriangle()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
    name: GetUpperTriangle
    nameWithType: Tensor<T>.GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
    name: GetUpperTriangle
    nameWithType: Tensor(Of T).GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetUpperTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetUpperTriangle(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  name: GetUpperTriangle(Int32)
  nameWithType: Tensor<T>.GetUpperTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle(System.Int32)
  nameWithType.vb: Tensor(Of T).GetUpperTriangle(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
    name: GetUpperTriangle
    nameWithType: Tensor<T>.GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
    name: GetUpperTriangle
    nameWithType: Tensor(Of T).GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetTriangle(System.Int32,System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetTriangle(System.Int32,System.Boolean)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  name: GetTriangle(Int32, Boolean)
  nameWithType: Tensor<T>.GetTriangle(Int32, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32, System.Boolean)
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32, Boolean)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32, System.Boolean)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Item(System.Int32[])
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Item(System.Int32[])
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  name: Item[Int32[]]
  nameWithType: Tensor<T>.Item[Int32[]]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[System.Int32[]]
  nameWithType.vb: Tensor(Of T).Item(Int32())
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(System.Int32())
  name.vb: Item(Int32())
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
    name: Item
    nameWithType: Tensor<T>.Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
    name: Item
    nameWithType: Tensor(Of T).Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Item(ReadOnlySpan{System.Int32})
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Item(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
  name: Item[ReadOnlySpan<Int32>]
  nameWithType: Tensor<T>.Item[ReadOnlySpan<Int32>]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[ReadOnlySpan<System.Int32>]
  nameWithType.vb: Tensor(Of T).Item(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(ReadOnlySpan(Of System.Int32))
  name.vb: Item(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
    name: Item
    nameWithType: Tensor<T>.Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
    name: Item
    nameWithType: Tensor(Of T).Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}},Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  name: Compare(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Compare(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  nameWithType.vb: Tensor(Of T).Compare(Tensor(Of T), Tensor(Of T))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Compare(Tensor(Of T), Tensor(Of T))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Compare
    nameWithType: Tensor<T>.Compare
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Compare
    nameWithType: Tensor(Of T).Compare
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}},Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  name: Equals(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Equals(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  nameWithType.vb: Tensor(Of T).Equals(Tensor(Of T), Tensor(Of T))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Equals(Tensor(Of T), Tensor(Of T))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Equals
    nameWithType: Tensor<T>.Equals
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Equals
    nameWithType: Tensor(Of T).Equals
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsFixedSize
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.IsFixedSize
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  name: IsFixedSize
  nameWithType: Tensor<T>.IsFixedSize
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsFixedSize
  nameWithType.vb: Tensor(Of T).IsFixedSize
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsFixedSize
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IsReadOnly
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.IsReadOnly
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  name: IsReadOnly
  nameWithType: Tensor<T>.IsReadOnly
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReadOnly
  nameWithType.vb: Tensor(Of T).IsReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReadOnly
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Contains({T})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Contains(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  name: Contains(T)
  nameWithType: Tensor<T>.Contains(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains(T)
  nameWithType.vb: Tensor(Of T).Contains(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
    name: Contains
    nameWithType: Tensor<T>.Contains
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
    name: Contains
    nameWithType: Tensor(Of T).Contains
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.ToDenseTensor
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.ToDenseTensor
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  name: ToDenseTensor()
  nameWithType: Tensor<T>.ToDenseTensor()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor()
  nameWithType.vb: Tensor(Of T).ToDenseTensor()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
    name: ToDenseTensor
    nameWithType: Tensor<T>.ToDenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
    name: ToDenseTensor
    nameWithType: Tensor(Of T).ToDenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetArrayString(System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetArrayString(System.Boolean)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  name: GetArrayString(Boolean)
  nameWithType: Tensor<T>.GetArrayString(Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString(System.Boolean)
  nameWithType.vb: Tensor(Of T).GetArrayString(Boolean)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString(System.Boolean)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
    name: GetArrayString
    nameWithType: Tensor<T>.GetArrayString
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
    name: GetArrayString
    nameWithType: Tensor(Of T).GetArrayString
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  isExternal: true
  name: GetTypeInfo(Type)
  nameWithType: TensorBase.GetTypeInfo(Type)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo(Type)
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  name: GetElementTypeInfo(TensorElementType)
  nameWithType: TensorBase.GetElementTypeInfo(TensorElementType)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
    name: GetElementTypeInfo
    nameWithType: TensorBase.GetElementTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
    name: TensorElementType
    nameWithType: TensorElementType
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo(Microsoft.ML.OnnxRuntime.Tensors.TensorElementType)
    name: GetElementTypeInfo
    nameWithType: TensorBase.GetElementTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetElementTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
    name: TensorElementType
    nameWithType: TensorElementType
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorElementType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  parent: Microsoft.ML.OnnxRuntime.Tensors.TensorBase
  name: GetTypeInfo()
  nameWithType: TensorBase.GetTypeInfo()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
    name: GetTypeInfo
    nameWithType: TensorBase.GetTypeInfo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.TensorBase.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  parent: Microsoft.ML.OnnxRuntime.Tensors
  name: Tensor<T>
  nameWithType: Tensor<T>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>
  nameWithType.vb: Tensor(Of T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T)
  name.vb: Tensor(Of T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Length
  name: Length
  nameWithType: Tensor<T>.Length
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Length
  nameWithType.vb: Tensor(Of T).Length
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Length
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Rank
  name: Rank
  nameWithType: Tensor<T>.Rank
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Rank
  nameWithType.vb: Tensor(Of T).Rank
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Rank
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReversedStride
  name: IsReversedStride
  nameWithType: Tensor<T>.IsReversedStride
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReversedStride
  nameWithType.vb: Tensor(Of T).IsReversedStride
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReversedStride
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Dimensions
  name: Dimensions
  nameWithType: Tensor<T>.Dimensions
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Dimensions
  nameWithType.vb: Tensor(Of T).Dimensions
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Dimensions
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Strides
  name: Strides
  nameWithType: Tensor<T>.Strides
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Strides
  nameWithType.vb: Tensor(Of T).Strides
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Strides
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
  name: Fill(T)
  nameWithType: Tensor<T>.Fill(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill(T)
  nameWithType.vb: Tensor(Of T).Fill(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
    name: Fill
    nameWithType: Tensor<T>.Fill
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Fill
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Fill(`0)
    name: Fill
    nameWithType: Tensor(Of T).Fill
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Fill
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
  name: CloneEmpty()
  nameWithType: Tensor<T>.CloneEmpty()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty()
  nameWithType.vb: Tensor(Of T).CloneEmpty()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
    name: CloneEmpty
    nameWithType: Tensor<T>.CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty
    name: CloneEmpty
    nameWithType: Tensor(Of T).CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
  isExternal: true
  name: CloneEmpty(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).CloneEmpty(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
    name: CloneEmpty
    nameWithType: Tensor<T>.CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty(ReadOnlySpan{System.Int32})
    name: CloneEmpty
    nameWithType: Tensor(Of T).CloneEmpty
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
  name: CloneEmpty<TResult>()
  nameWithType: Tensor<T>.CloneEmpty<TResult>()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>()
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)()
  name.vb: CloneEmpty(Of TResult)()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
    name: CloneEmpty<TResult>
    nameWithType: Tensor<T>.CloneEmpty<TResult>
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1
    name: CloneEmpty(Of TResult)
    nameWithType: Tensor(Of T).CloneEmpty(Of TResult)
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
  name: GetDiagonal()
  nameWithType: Tensor<T>.GetDiagonal()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal()
  nameWithType.vb: Tensor(Of T).GetDiagonal()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
    name: GetDiagonal
    nameWithType: Tensor<T>.GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal
    name: GetDiagonal
    nameWithType: Tensor(Of T).GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
  isExternal: true
  name: GetDiagonal(Int32)
  nameWithType: Tensor<T>.GetDiagonal(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal(System.Int32)
  nameWithType.vb: Tensor(Of T).GetDiagonal(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
    name: GetDiagonal
    nameWithType: Tensor<T>.GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetDiagonal(System.Int32)
    name: GetDiagonal
    nameWithType: Tensor(Of T).GetDiagonal
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetDiagonal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
  name: GetTriangle()
  nameWithType: Tensor<T>.GetTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle()
  nameWithType.vb: Tensor(Of T).GetTriangle()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
  isExternal: true
  name: GetTriangle(Int32)
  nameWithType: Tensor<T>.GetTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32)
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32)
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
  name: GetUpperTriangle()
  nameWithType: Tensor<T>.GetUpperTriangle()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle()
  nameWithType.vb: Tensor(Of T).GetUpperTriangle()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
    name: GetUpperTriangle
    nameWithType: Tensor<T>.GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle
    name: GetUpperTriangle
    nameWithType: Tensor(Of T).GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
  isExternal: true
  name: GetUpperTriangle(Int32)
  nameWithType: Tensor<T>.GetUpperTriangle(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle(System.Int32)
  nameWithType.vb: Tensor(Of T).GetUpperTriangle(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
    name: GetUpperTriangle
    nameWithType: Tensor<T>.GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetUpperTriangle(System.Int32)
    name: GetUpperTriangle
    nameWithType: Tensor(Of T).GetUpperTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetUpperTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
  isExternal: true
  name: GetTriangle(Int32, Boolean)
  nameWithType: Tensor<T>.GetTriangle(Int32, Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle(System.Int32, System.Boolean)
  nameWithType.vb: Tensor(Of T).GetTriangle(Int32, Boolean)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle(System.Int32, System.Boolean)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
    name: GetTriangle
    nameWithType: Tensor<T>.GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetTriangle(System.Int32,System.Boolean)
    name: GetTriangle
    nameWithType: Tensor(Of T).GetTriangle
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetTriangle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
  isExternal: true
  name: Item[Int32[]]
  nameWithType: Tensor<T>.Item[Int32[]]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[System.Int32[]]
  nameWithType.vb: Tensor(Of T).Item(Int32())
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(System.Int32())
  name.vb: Item(Int32())
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
    name: Item
    nameWithType: Tensor<T>.Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(System.Int32[])
    name: Item
    nameWithType: Tensor(Of T).Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
  isExternal: true
  name: Item[ReadOnlySpan<Int32>]
  nameWithType: Tensor<T>.Item[ReadOnlySpan<Int32>]
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item[ReadOnlySpan<System.Int32>]
  nameWithType.vb: Tensor(Of T).Item(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item(ReadOnlySpan(Of System.Int32))
  name.vb: Item(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
    name: Item
    nameWithType: Tensor<T>.Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Item(ReadOnlySpan{System.Int32})
    name: Item
    nameWithType: Tensor(Of T).Item
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  name: Compare(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Compare(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  nameWithType.vb: Tensor(Of T).Compare(Tensor(Of T), Tensor(Of T))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Compare(Tensor(Of T), Tensor(Of T))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Compare
    nameWithType: Tensor<T>.Compare
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Compare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Compare(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Compare
    nameWithType: Tensor(Of T).Compare
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Compare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
  name: Equals(Tensor<T>, Tensor<T>)
  nameWithType: Tensor<T>.Equals(Tensor<T>, Tensor<T>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>, Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>)
  nameWithType.vb: Tensor(Of T).Equals(Tensor(Of T), Tensor(Of T))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T), Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T))
  name.vb: Equals(Tensor(Of T), Tensor(Of T))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Equals
    nameWithType: Tensor<T>.Equals
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Equals(Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0},Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0})
    name: Equals
    nameWithType: Tensor(Of T).Equals
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsFixedSize
  name: IsFixedSize
  nameWithType: Tensor<T>.IsFixedSize
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsFixedSize
  nameWithType.vb: Tensor(Of T).IsFixedSize
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsFixedSize
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  commentId: P:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IsReadOnly
  name: IsReadOnly
  nameWithType: Tensor<T>.IsReadOnly
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IsReadOnly
  nameWithType.vb: Tensor(Of T).IsReadOnly
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IsReadOnly
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
  name: Contains(T)
  nameWithType: Tensor<T>.Contains(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains(T)
  nameWithType.vb: Tensor(Of T).Contains(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
    name: Contains
    nameWithType: Tensor<T>.Contains
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Contains(`0)
    name: Contains
    nameWithType: Tensor(Of T).Contains
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
  name: ToDenseTensor()
  nameWithType: Tensor<T>.ToDenseTensor()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor()
  nameWithType.vb: Tensor(Of T).ToDenseTensor()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
    name: ToDenseTensor
    nameWithType: Tensor<T>.ToDenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.ToDenseTensor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.ToDenseTensor
    name: ToDenseTensor
    nameWithType: Tensor(Of T).ToDenseTensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).ToDenseTensor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
  isExternal: true
  name: GetArrayString(Boolean)
  nameWithType: Tensor<T>.GetArrayString(Boolean)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString(System.Boolean)
  nameWithType.vb: Tensor(Of T).GetArrayString(Boolean)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString(System.Boolean)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
    name: GetArrayString
    nameWithType: Tensor<T>.GetArrayString
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetArrayString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetArrayString(System.Boolean)
    name: GetArrayString
    nameWithType: Tensor(Of T).GetArrayString
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetArrayString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.#ctor
  name: DenseTensor
  nameWithType: DenseTensor<T>.DenseTensor
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.DenseTensor
  nameWithType.vb: DenseTensor(Of T).DenseTensor
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).DenseTensor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ReadOnlySpan{System.Int32}
  commentId: '!:ReadOnlySpan{System.Int32}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Memory{{T}}
  commentId: '!:Memory{``0}'
  definition: Memory`1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: Memory`1
    name: Memory
    nameWithType: Memory
    fullName: Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Memory`1
    name: Memory
    nameWithType: Memory
    fullName: Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Memory`1
  isExternal: true
  name: Memory<>
  nameWithType: Memory<>
  fullName: Memory<>
  nameWithType.vb: Memory(Of )
  fullName.vb: Memory(Of )
  name.vb: Memory(Of )
  spec.csharp:
  - uid: Memory`1
    name: Memory
    nameWithType: Memory
    fullName: Memory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Memory`1
    name: Memory
    nameWithType: Memory
    fullName: Memory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Buffer
  name: Buffer
  nameWithType: DenseTensor<T>.Buffer
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Buffer
  nameWithType.vb: DenseTensor(Of T).Buffer
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Buffer
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.GetValue(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.GetValue(System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  name: GetValue(Int32)
  nameWithType: Tensor<T>.GetValue(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue(System.Int32)
  nameWithType.vb: Tensor(Of T).GetValue(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
    name: GetValue
    nameWithType: Tensor<T>.GetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
    name: GetValue
    nameWithType: Tensor(Of T).GetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.GetValue
  name: GetValue
  nameWithType: DenseTensor<T>.GetValue
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.GetValue
  nameWithType.vb: DenseTensor(Of T).GetValue
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).GetValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
  isExternal: true
  name: GetValue(Int32)
  nameWithType: Tensor<T>.GetValue(Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue(System.Int32)
  nameWithType.vb: Tensor(Of T).GetValue(Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue(System.Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
    name: GetValue
    nameWithType: Tensor<T>.GetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.GetValue(System.Int32)
    name: GetValue
    nameWithType: Tensor(Of T).GetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.SetValue(System.Int32,{T})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.SetValue(System.Int32,`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  name: SetValue(Int32, T)
  nameWithType: Tensor<T>.SetValue(Int32, T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue(System.Int32, T)
  nameWithType.vb: Tensor(Of T).SetValue(Int32, T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue(System.Int32, T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
    name: SetValue
    nameWithType: Tensor<T>.SetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
    name: SetValue
    nameWithType: Tensor(Of T).SetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.SetValue
  name: SetValue
  nameWithType: DenseTensor<T>.SetValue
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.SetValue
  nameWithType.vb: DenseTensor(Of T).SetValue
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).SetValue
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
  isExternal: true
  name: SetValue(Int32, T)
  nameWithType: Tensor<T>.SetValue(Int32, T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue(System.Int32, T)
  nameWithType.vb: Tensor(Of T).SetValue(Int32, T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue(System.Int32, T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
    name: SetValue
    nameWithType: Tensor<T>.SetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.SetValue(System.Int32,`0)
    name: SetValue
    nameWithType: Tensor(Of T).SetValue
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).SetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.CopyTo(`0[],System.Int32)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: Tensor<T>.CopyTo(T[], Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: Tensor(Of T).CopyTo(T(), Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: Tensor<T>.CopyTo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: Tensor(Of T).CopyTo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CopyTo
  name: CopyTo
  nameWithType: DenseTensor<T>.CopyTo
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.CopyTo
  nameWithType.vb: DenseTensor(Of T).CopyTo
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).CopyTo
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: Tensor<T>.CopyTo(T[], Int32)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: Tensor(Of T).CopyTo(T(), Int32)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: Tensor<T>.CopyTo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: Tensor(Of T).CopyTo
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.IndexOf({T})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.IndexOf(`0)
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: Tensor<T>.IndexOf(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf(T)
  nameWithType.vb: Tensor(Of T).IndexOf(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
    name: IndexOf
    nameWithType: Tensor<T>.IndexOf
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
    name: IndexOf
    nameWithType: Tensor(Of T).IndexOf
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.IndexOf
  name: IndexOf
  nameWithType: DenseTensor<T>.IndexOf
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.IndexOf
  nameWithType.vb: DenseTensor(Of T).IndexOf
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).IndexOf
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: Tensor<T>.IndexOf(T)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf(T)
  nameWithType.vb: Tensor(Of T).IndexOf(T)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf(T)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
    name: IndexOf
    nameWithType: Tensor<T>.IndexOf
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.IndexOf(`0)
    name: IndexOf
    nameWithType: Tensor(Of T).IndexOf
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Clone
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Clone
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  name: Clone()
  nameWithType: Tensor<T>.Clone()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone()
  nameWithType.vb: Tensor(Of T).Clone()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
    name: Clone
    nameWithType: Tensor<T>.Clone
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
    name: Clone
    nameWithType: Tensor(Of T).Clone
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Clone
  name: Clone
  nameWithType: DenseTensor<T>.Clone
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Clone
  nameWithType.vb: DenseTensor(Of T).Clone
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Clone
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
  name: Clone()
  nameWithType: Tensor<T>.Clone()
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone()
  nameWithType.vb: Tensor(Of T).Clone()
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone()
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
    name: Clone
    nameWithType: Tensor<T>.Clone
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Clone
    name: Clone
    nameWithType: Tensor(Of T).Clone
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.CloneEmpty``1(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.CloneEmpty``1(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  name: CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
    name: CloneEmpty<TResult>
    nameWithType: Tensor<T>.CloneEmpty<TResult>
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
    name: CloneEmpty(Of TResult)
    nameWithType: Tensor(Of T).CloneEmpty(Of TResult)
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.CloneEmpty
  name: CloneEmpty
  nameWithType: DenseTensor<T>.CloneEmpty
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.CloneEmpty
  nameWithType.vb: DenseTensor(Of T).CloneEmpty
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).CloneEmpty
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{TResult}}
  commentId: T:Microsoft.ML.OnnxRuntime.Tensors.Tensor{``0}
  parent: Microsoft.ML.OnnxRuntime.Tensors
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
  name: Tensor<TResult>
  nameWithType: Tensor<TResult>
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<TResult>
  nameWithType.vb: Tensor(Of TResult)
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of TResult)
  name.vb: Tensor(Of TResult)
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1
    name: Tensor
    nameWithType: Tensor
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
  isExternal: true
  name: CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.CloneEmpty<TResult>(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)(ReadOnlySpan(Of System.Int32))
  name.vb: CloneEmpty(Of TResult)(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
    name: CloneEmpty<TResult>
    nameWithType: Tensor<T>.CloneEmpty<TResult>
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.CloneEmpty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.CloneEmpty``1(ReadOnlySpan{System.Int32})
    name: CloneEmpty(Of TResult)
    nameWithType: Tensor(Of T).CloneEmpty(Of TResult)
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).CloneEmpty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}.Reshape(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor{`0}.Reshape(ReadOnlySpan{System.Int32})
  parent: Microsoft.ML.OnnxRuntime.Tensors.Tensor{{T}}
  definition: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
  name: Reshape(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.Reshape(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).Reshape(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape(ReadOnlySpan(Of System.Int32))
  name.vb: Reshape(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
    name: Reshape
    nameWithType: Tensor<T>.Reshape
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
    name: Reshape
    nameWithType: Tensor(Of T).Reshape
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape*
  commentId: Overload:Microsoft.ML.OnnxRuntime.Tensors.DenseTensor`1.Reshape
  name: Reshape
  nameWithType: DenseTensor<T>.Reshape
  fullName: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor<T>.Reshape
  nameWithType.vb: DenseTensor(Of T).Reshape
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.DenseTensor(Of T).Reshape
- uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
  commentId: M:Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
  isExternal: true
  name: Reshape(ReadOnlySpan<Int32>)
  nameWithType: Tensor<T>.Reshape(ReadOnlySpan<Int32>)
  fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape(ReadOnlySpan<System.Int32>)
  nameWithType.vb: Tensor(Of T).Reshape(ReadOnlySpan(Of Int32))
  fullName.vb: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape(ReadOnlySpan(Of System.Int32))
  name.vb: Reshape(ReadOnlySpan(Of Int32))
  spec.csharp:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
    name: Reshape
    nameWithType: Tensor<T>.Reshape
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor<T>.Reshape
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ML.OnnxRuntime.Tensors.Tensor`1.Reshape(ReadOnlySpan{System.Int32})
    name: Reshape
    nameWithType: Tensor(Of T).Reshape
    fullName: Microsoft.ML.OnnxRuntime.Tensors.Tensor(Of T).Reshape
  - name: (
    nameWithType: (
    fullName: (
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
